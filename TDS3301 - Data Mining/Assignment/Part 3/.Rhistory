qplot(x = displ, y= hwy, data = mpg, col = "drv" )
qplot(x = displ, y= hwy, data = mpg, col = drv )
qplot(x = displ, y= hwy, data = mpg, color = drv)
qplot(x = displ, y= hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, x = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, aes = drv)
qplot(hwy, data = mpg, aes(drv))
qplot(hwy, data = mpg, aes = "drv")
qplot(hwy, data = mpg, drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qlot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
swirl()
qplot(data - displ, hwy, data = mpg, geom = c("point", smooth), facets = .~drv)
qplot(data - displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(data ~ displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(data, displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(x = data, y =displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
?qplot
head(mpg)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, disp, why)
g <- ggplot(data mpg, disp, why)
g <- ggplot(data = mpg, disp, why)
g <- ggplot(data = mpg, disp, hwy)
g <- ggplot(data = mpg, disp, hwy)
g <- ggplot(data = mpg, displ, hwy)
g <- ggplot(data = mpg, x = displ, y=  hwy)
g <- ggplot(data = mpg, aes(displ, hwy))
g
summary(g)
g + geom_points()
g + geom_point()
g + geom_points() + geom_smooth()
(g + geom_points()) + geom_smooth()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(aes("lm"))
?geom_smooth
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtile("Swirl Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 0.5, )
g + geom_point(aes = aes(color = drv), size = 4, alpha = 0.5, )
?aes
g + geom_point(aes(color = drv), size = 4, alpha = 0.5, )
g + geom_point(aes(drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(color = aes(color = drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv), size = 2, alpha = 0.5) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
ggplot(data = testdata, aes(x = myx, y = myy))
ggplot(data = testdat, aes(x = myx, y = myy))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = (-3, 3))
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(testdat, aes(x=displ,y=hwy,color=factor(year)))
g <- ggplot(mpg, aes(x=displ,y=hwy,color=factor(year)))
g + geom_points()
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts(brk)
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = "cut")
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut, set = "density")
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
geom_smooth("lm")
geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method="lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method="lm") + facets (.~cut)
qplot(carat, price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method="lm")
exit
exit()
library(swirl)
rm(ls = list())
rm(list = ls())
swirl()
ggplot(diamonds, aes(depth, price))
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_points(alpha = 1/3)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_points( alpha = 1/3 ) + facet_grid(cut ~ car2)
g + geom_point( alpha = 1/3 ) + facet_grid(cut ~ car2)
diamonds[myd, ]
g+geom_point(alpha=1/3)+facet_grid(cut~car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot (diamonds, aes(carat, price)) + geom_boxplot(), facet_grid(.~cut)
ggplot (diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
g + geom_point( alpha = 1/3 ) + facet_grid(cut ~ car2)
g + geom_point( alpha = 1/3 ) + facet_grid(cut ~ car2)
rm(list = ls())
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lines
?points
?panel.lmline
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?trellis.par.set
?splom
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
print(ggplot(mtcars,))
g <- ggplot(mtcars, aes(mpg, cyl))
print(g)
?xyplot
?xyplot
library(swirl)
swirl()
mat
svd(mat)
matu %*% matv
matu * matv
matu * t(matv)
matu * matv
matu * matv
diag * matu * matv
diag * matu
matu %*% diag %*% t(matv)
scale(mat)
svd((scale(mat)))
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
library(swirl)
swirl()
swirl()
swirl()
swirl()
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.r")
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
scale(svd(mat))
svd(scale(mat))
mat
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$d[,1] )
a1 <- svd1$d[,1]
a1 <- (svd1$u[,1] and svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1])
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
exit()
exit
swirl()
swirl()
a2 <- svd1$u + svd1$d
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(a2, occurences = 5)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd)
names(ssd[562:563])
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe()
showMe(1:5)
showMe(1:6)
mdist <- sub1[,1:3]
mdist <- dist(sub1[,1:3])
View(sub1)
colnames(sub1)
colnames(mdist1)
colnames(mdist)
mdist
hclustering <- hclust(mdist)
mplyclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
?dist
mdist <- dist(x[,10:12])
mdist <- dist(sub1[,10:12])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd(scale(sub1[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,10:12], maxCon)
mdist <- dist(sub1[, c(10:12,maxCon])
mdist <- dist(sub1[, c(10:12,maxCon)])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1, centers = 66)
kClust <- kmeans(sub1[,-2], centers = 66)
?subset
length(colnames(sub1))
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kClust$centers)
kClust$size == 29
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- call(kClust$size = 49)
walkdown <- call(kClust$size == 49)
walkdown <- call(kClust$size == 49)
walkdown <- subset(kClust ,kClust$size == 49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "walkdown Clusters")
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "walkdown Cluster")
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
# Construct star_wars_matrix
box_office <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)
star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE,
dimnames = list(c("A New Hope", "The Empire Strikes Back", "Return of the Jedi"),
c("US", "non-US")))
# The worldwide box office figures
worldwide_vector <- rowSums(star_wars_matrix)
# Bind the new variable worldwide_vector as a column to star_wars_matrix
all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)
all_wars_matrix
star_wars_matrix
worldwide_vector
cbind(worldwide_vector, star_wars_matrix)
factor_gender_vector <- factor(c("M", "F"))
factor_gender_vector +  c("K")
factor_gender_vector +  c("M")
rbind(factor_gender_vector, c("M"))
vector(factor_gender_vector, c("M"))
append(factor_gender_vector, c("M"))
append(factor_gender_vector, c("K"))
test <- append(factor_gender_vector, c("K"))
test
factor_temperature_vector <- factor("LOL", order = TRUE, levels = c("Low", "Medium", "High"))
factor_temperature_vector
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("Female", "Male")
survey_vector
factor_survey_vector
levels(factor_survey_vector) <- c("Malleee", "FEMale")
factor_survey_vector
?list
require(editrules)
require(deducorrect)
require(VIM)
is.special <- function(x){ if (is.numeric(x)) !is.finite(x) else is.na(x) }
replace_na <- function(x)
{
idx <- which(is.special(x))
x[idx] = NA
x
}
is.complete <- function(x)
{
if(sum(is.na(x)) > 0)
return(FALSE)
return(TRUE)
}
x = 1:10
y = 1:10
x[10] = NA
y[10] = NA
df <- data.frame(x = x, y = y)
df
apply(df, 1, is.complete)
completeObservations <- apply(df, 1, is.complete)
completeObservations
completeObservationsCount <- sum(completeObservations)
completeObservationsCount
percentCompleteObservation <- completeObservationsCount/length(completeObservations)
percentCompleteObservation
is.complete <- function(x)
{
if(sum(is.na(x)) > 0)
return(FALSE)
return(TRUE)
}
is.complete <- function(x)
{
if(sum(is.na(x)) > 0)
{
print(x)
return(FALSE)
}
return(TRUE)
}
completeObservations <- apply(df, 1, is.complete)
df
df[1, 1] = NA
df
completeObservations <- apply(df, 1, is.complete)
completeObservations
sum(completeObservations)/length(completeObservations)
[0,	1,	1,	1,	0,	0,	0,	1,	2,	2,	2,
0,	1,	1,	2,	1,	1,	0,	0,	1,	2,	2,
1,	1,	1,	1,	1,	0,	1,	0,	1,	2,	3,
1,	2,	2,	0,	0,	0,	1,	1,	0,	1,	3,
2,	3,	3,	1,	1,	1,	2,	2,	1,	2,	2,
1,	3,	3,	0,	1,	2,	2,	2,	2,	2,	2,
0,	1,	1,	0,	0,	2,	1,	1,	1,	2,	3,
1,	0,	0,	0,	1,	2,	1,	0,	2,	3,	5,
0,	0,	0,	0,	0,	0,	0,	0,	2,	5,	8,
1,	1,	1,	1,	0,	1,	0,	0,	3,	6,	7,
3,	3,	3,	3,	3,	2,	0,	1,	2,	7,	7]
[0,	1,	1,	1,	0,	0,	0,	1,	2,	2,	2,
0,	1,	1,	2,	1,	1,	0,	0,	1,	2,	2,
1,	1,	1,	1,	1,	0,	1,	0,	1,	2,	3,
1,	2,	2,	0,	0,	0,	1,	1,	0,	1,	3,
2,	3,	3,	1,	1,	1,	2,	2,	1,	2,	2,
1,	3,	3,	0,	1,	2,	2,	2,	2,	2,	2,
0,	1,	1,	0,	0,	2,	1,	1,	1,	2,	3,
1,	0,	0,	0,	1,	2,	1,	0,	2,	3,	5,
0,	0,	0,	0,	0,	0,	0,	0,	2,	5,	8,
1,	1,	1,	1,	0,	1,	0,	0,	3,	6,	7,
3,	3,	3,	3,	3,	2,	0,	1,	2,	7,	7]
[1,2]
test =[0,	1,	1,	1,	0,	0,	0,	1,	2,	2,	2,
0,	1,	1,	2,	1,	1,	0,	0,	1,	2,	2,
1,	1,	1,	1,	1,	0,	1,	0,	1,	2,	3,
1,	2,	2,	0,	0,	0,	1,	1,	0,	1,	3,
2,	3,	3,	1,	1,	1,	2,	2,	1,	2,	2,
1,	3,	3,	0,	1,	2,	2,	2,	2,	2,	2,
0,	1,	1,	0,	0,	2,	1,	1,	1,	2,	3,
1,	0,	0,	0,	1,	2,	1,	0,	2,	3,	5,
0,	0,	0,	0,	0,	0,	0,	0,	2,	5,	8,
1,	1,	1,	1,	0,	1,	0,	0,	3,	6,	7,
3,	3,	3,	3,	3,	2,	0,	1,	2,	7,	7]
test = [4, 3, 5]
test = {4, 3, 5}
test = 4, 3, 5
test =[0,	1,	1,	1,	0,	0,	0,	1,	2,	2,	2,
0,	1,	1,	2,	1,	1,	0,	0,	1,	2,	2,
1,	1,	1,	1,	1,	0,	1,	0,	1,	2,	3,
1,	2,	2,	0,	0,	0,	1,	1,	0,	1,	3,
2,	3,	3,	1,	1,	1,	2,	2,	1,	2,	2,
1,	3,	3,	0,	1,	2,	2,	2,	2,	2,	2,
0,	1,	1,	0,	0,	2,	1,	1,	1,	2,	3,
1,	0,	0,	0,	1,	2,	1,	0,	2,	3,	5,
0,	0,	0,	0,	0,	0,	0,	0,	2,	5,	8,
1,	1,	1,	1,	0,	1,	0,	0,	3,	6,	7,
3,	3,	3,	3,	3,	2,	0,	1,	2,	7,	7]
c(1,2,3)
test = c(0,	1,	1,	1,	0,	0,	0,	1,	2,	2,	2,
0,	1,	1,	2,	1,	1,	0,	0,	1,	2,	2,
1,	1,	1,	1,	1,	0,	1,	0,	1,	2,	3,
1,	2,	2,	0,	0,	0,	1,	1,	0,	1,	3,
2,	3,	3,	1,	1,	1,	2,	2,	1,	2,	2,
1,	3,	3,	0,	1,	2,	2,	2,	2,	2,	2,
0,	1,	1,	0,	0,	2,	1,	1,	1,	2,	3,
1,	0,	0,	0,	1,	2,	1,	0,	2,	3,	5,
0,	0,	0,	0,	0,	0,	0,	0,	2,	5,	8,
1,	1,	1,	1,	0,	1,	0,	0,	3,	6,	7,
3,	3,	3,	3,	3,	2,	0,	1,	2,	7,	7)
test
unique(test)
test == unique(test)
test == 1
count(test == 1)
sum(test == 1)
sum(test == 2)
sum(test == 3)
sum(test == 4)
sum(test == 5)
sum(test == 6)
sum(test == 7)
sum(test == 8)
shiny::runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
runApp('TDS3301DataMining/Part 2/shiny')
install.packages("FSelector")
library(FSelector)
http://stackoverflow.com/questions/22488560/what-does-fselector-information-gain-measure
http://stackoverflow.com/questions/22488560/what-does-fselector-information-gain-measure
library(FSelector)
data(iris)
weights <- information.gain(Species~., iris)
print(weights)
subset <- cutoff.k(weights, 2)
f <- as.simple.formula(subset, "Species")
print(f)
f
weights
subset
sort(weight)
sort(weights)
weights
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
getwd()
setwd("C:/Users/Jack/Document/TDS3301DataMining/Part 3")
setwd("C:/Users/Jack/Document/TDS3301DataMining/Part 3")
setwd("C:\Users\Jack\Document\TDS3301DataMining\Part 3")
setwd("C:/Users/Jack/Document/TDS3301DataMining")
setwd("C:\Users\Jack\Documents\TDS3301DataMining\Part 3")
setwd("C:/Users/Jack/Documents/TDS3301DataMining/Part 3")
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
print.accuracy("Mathematics Decision Tree", math.tree.table)
print.accuracy("Mathematics Decision Tree ", math.tree.table)
print.accuracy("Mathematics Decision Tree ", math.bayes.table)
print.accuracy("Mathematics Decision Tree ", math.nn.table)
math.tree.table
sum(math.tree.table)
math.tree.table
math.bayes.table
math.nn.table
port.nn.table
port.tree.table
port.bayes.table
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
rm(list = ls())
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
# Save plot since it's too big to be displayed in R.
png("Plots/G2 and G3 Density Plot.png", width=1000)
par(mfrow=c(1, 5))
plot(density(merged[!is.na(merged$G1.x) & merged$G2.math=="Weak",]$G2.x), col="blue", main="Weak")
lines(density(merged[!is.na(merged$G1.x) & merged$G3.math=="Weak",]$G3.x), col="red")
plot(density(merged[!is.na(merged$G1.x) & merged$G2.math=="Sufficient",]$G2.x), col="blue", main="Sufficient")
lines(density(merged[!is.na(merged$G1.x) & merged$G3.math=="Sufficient",]$G3.x), col="red")
plot(density(merged[!is.na(merged$G1.x) & merged$G2.math=="Good",]$G2.x), col="blue", main="Good")
lines(density(merged[!is.na(merged$G1.x) & merged$G3.math=="Good",]$G3.x), col="red")
plot(density(merged[!is.na(merged$G1.x) & merged$G2.math=="Very Good",]$G2.x), col="blue", main="Very Good")
lines(density(merged[!is.na(merged$G1.x) & merged$G3.math=="Very Good",]$G3.x), col="red")
plot(density(merged[!is.na(merged$G1.x) & merged$G2.math=="Excellent",]$G2.x), col="blue", main="Excellent")
lines(density(merged[!is.na(merged$G1.x) & merged$G3.math=="Excellent",]$G3.x), col="red")
legend('topright', c("G2", "G3"), lty=1, col=c("blue", "red"), bty='n')
dev.off()
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
rm(list = ls())
source('~/TDS3301DataMining/Part 3/exe.R', echo=TRUE)
